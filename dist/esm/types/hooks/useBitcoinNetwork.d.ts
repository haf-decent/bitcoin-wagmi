import { WalletNetwork } from "../types";
export declare function useBitcoinNetwork(): {
    network: WalletNetwork;
    switchNetwork: import("@tanstack/react-query").UseMutateFunction<void, Error, WalletNetwork, unknown>;
    switchNetworkAsync: import("@tanstack/react-query").UseMutateAsyncFunction<void, Error, WalletNetwork, unknown>;
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
} | {
    network: WalletNetwork;
    switchNetwork: import("@tanstack/react-query").UseMutateFunction<void, Error, WalletNetwork, unknown>;
    switchNetworkAsync: import("@tanstack/react-query").UseMutateAsyncFunction<void, Error, WalletNetwork, unknown>;
    data: undefined;
    variables: WalletNetwork;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
} | {
    network: WalletNetwork;
    switchNetwork: import("@tanstack/react-query").UseMutateFunction<void, Error, WalletNetwork, unknown>;
    switchNetworkAsync: import("@tanstack/react-query").UseMutateAsyncFunction<void, Error, WalletNetwork, unknown>;
    data: undefined;
    error: Error;
    variables: WalletNetwork;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
} | {
    network: WalletNetwork;
    switchNetwork: import("@tanstack/react-query").UseMutateFunction<void, Error, WalletNetwork, unknown>;
    switchNetworkAsync: import("@tanstack/react-query").UseMutateAsyncFunction<void, Error, WalletNetwork, unknown>;
    data: void;
    error: null;
    variables: WalletNetwork;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
};
